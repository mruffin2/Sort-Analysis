//Margie Ruffin
//DS&A
//bubble sort & quick sort anaylsis 
// Quick Sort algorithm from https://www.geeksforgeeks.org/quick-sort/
// Bubble Sort algorithm from https://www.geeksforgeeks.org/bubble-sort/

//---------------------------------Quick Sort-------------------------------------------


#include <iostream>
using namespace std;

/* Program and analysis for bubble sort.Comparing swaps and comparisons. 
*/

//BASIC SWAP FUNCTION
void swap(int *num1 ,int *num2)
{
    int temp = *num1;
    *num1 = *num2;
    *num2 = temp;
}
//------------------------QUICK SORT FUNCTIONS--------------------------------------------
int swapCount2 = 0; // 2nd swap counter 
int compCount2 = 0; // 2nd comparisons counter

int partition (int arr[], int low, int high)
{
    int pivot = arr[high];    // pivot
    int i = (low - 1);  // Index of smaller element
 
    for (int j = low; j <= high- 1; j++)
    {
        // If current element is smaller than or
        // equal to pivot
        if (arr[j] <= pivot)
        {
            i++;    // increment index of smaller element
            swap(&arr[i], &arr[j]);
            
        }
        compCount2 ++;
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

/* The main function that implements QuickSort
 arr[] --> Array to be sorted,
  low  --> Starting index,
  high  --> Ending index */
void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
        int pi = partition(arr, low, high);
        swapCount2 ++;
 
        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
//----------------------------------------------------------------------------------------

void printArray(int array[], int arraySize)
{
    int i;
    for (i=0; i < arraySize; i++)
    {
        //printf("%d ", array[i]);
        cout<< array[i] << ' ';
    }
    cout << endl;
}

int main()
{
    //two arrays 
    int array1 [] = { 86, 85, 27, 64, 71, 95, 2, 5, 96, 30, 72, 52, 13, 34, 82, 57, 42, 81, 44, 9, 62, 83, 23, 3, 70, 98, 79, 14, 53, 81, 1, 8};

    int array2[] = { 38, 96, 50, 41, 81, 47, 15, 19, 16, 10, 42, 11, 92, 37, 44, 58, 56, 71, 49, 61, 33, 7, 64, 86, 5, 25, 74, 67, 52, 28, 76, 39, 22, 97, 98, 27, 95, 23, 75, 14, 93, 43, 18, 55, 72, 31, 73, 40, 63, 6, 1, 35, 45, 17, 79, 13, 3, 84, 89, 59, 62, 65, 100, 32, 82, 48, 20, 88, 66, 78, 80, 29, 85, 12, 8, 68, 60, 26, 91, 54, 21, 57, 94, 70, 24, 4, 34, 83, 69, 9, 99, 51, 90, 87, 30, 53, 2, 36, 77, 46};
    
    cout << " --------Quick Sort------------" << endl;
    
    int m = sizeof(array1)/sizeof(array1[0]);
    quickSort(array1, 0, m-1);
    cout << "Number of swaps: "<< endl;
    cout << swapCount2 << endl;
    
    cout << "Number of comparisons: "<< endl;
    cout << compCount2 << endl;
    
    cout << "Sorted array: "<< endl;
    printArray(array1, m);
    cout << endl;
    
    
    
    swapCount2 = 0; // 2nd swap counter 
    compCount2 = 0; // 2nd comparisons counter

    int m2 = sizeof(array2)/sizeof(array2[0]);
    quickSort(array2, 0, m2-1);
    cout << "Number of swaps: "<< endl;
    cout << swapCount2 << endl;
    
    cout << "Number of comparisons: "<< endl;
    cout << compCount2 << endl;
    
    cout << "Sorted array: "<< endl;
    printArray(array2, m2);
    cout << endl;
    
    
   
   return 0;
}
